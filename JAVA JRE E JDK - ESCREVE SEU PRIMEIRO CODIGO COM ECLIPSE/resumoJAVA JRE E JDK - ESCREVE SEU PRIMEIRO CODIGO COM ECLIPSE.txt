Já falamos um pouco sobre o Bytecode que é um código de máquina parecido com o Assembly. Talvez você (como eu!) estranhou o nome Bytecode, no entanto, tem uma explicação bem simples para tal. Existe um conjunto de comandos que a máquina virtual Java entende. Esses comandos também são chamados de opcodes (operation code), e cada opcode possui o tamanho de exatamente 1 Byte! E aí temos um opcode de 1 Byte ou, mais simples, Bytecode. :)

Nessa aula introdutória já aprendemos vários assuntos fundamentais sobre Java.

Falamos sobre as principais características da linguagem Java como:

orientado a objetos
parecido com C++
muitas bibliotecas e grande comunidade
Além disso, aprendemos:

a diferença entre o código fonte e o Bytecode
para executar o Bytecode é preciso ter a máquina virtual java
o Bytecode é independente do sistema operacional
Vimos também os principais componentes da plataforma Java que são:

Java Virtual Machine (JVM)
linguagem Java
Bibliotecas Java (API)
Na próxima aula já vamos escrever o primeiro código Java! Vamos continuar?

*************

O primeiro é o ambiente de execução, o segundo são as ferramentas de desenvolvimento junto com o ambiente de execução. Simplificando podemos dizer:

JDK = JRE + ferramentas de desenvolvimentoCOPIAR CÓDIGO
Existe uma terceira sigla, JVM (Java Virtual Machine), que também já usamos durante o curso. A responsabilidade da Java Virtual Machine é executar o Bytecode! 

A resposta é simples: O JRE (o nosso ambiente de execução) contém a JVM, mas também possui um monte de bibliotecas embutidas. Ou seja, para rodar uma aplicação Java não basta ter apenas a JVM, também é preciso ter as bibliotecas.

Assim podemos simplificar e dizer:

JRE = JVM + bibliotecasCOPIAR CÓDIGO
É importante entender que você não pode baixar a JVM apenas. Você sempre baixa o JRE que tem a JVM e as bibliotecas em conjunto.

***********

console.log é o mesmo que System.out.println("ola mundo");

todo código precisa estar dentro de uma classe

Repare que passamos a extensão do arquivo (.java) para o comando javac:

javac Programa.javaCOPIAR CÓDIGO
E para chamar a JVM usamos apenas o nome da classe (sem extensão):

java Programa

**********

Nessa aula você escreveu o seu primeiro código Java e aprendemos:

qual é a diferença entre JRE e JDK
como compilar um código fonte Java na linha de comando (javac)
como executar o Bytecode na linha de comando (java)
um programa Java deve estar escrito dentro de uma classe (class)
toda instrução Java deve ser finalizada com ;
para abrir e fechar um bloco usaremos as chaves {}
um programa Java possui uma entrada que é uma função (método) main
para imprimir algo no console usamos a instrução System.out.println()

*******

Este capítulo apresentou:

O papel de um IDE e sua diferença de um editor
Como fazer o download do Eclipse IDE
Para que serve um workspace
O conceito de perspectiva
Como criar um projeto Java, inclusive classes e como executá-lo.
Como exibir diferentes views

***********

https://cursos.alura.com.br/course/java-primeiros-passos/task/30741

**********

Nesta aula iniciamos nosso aprendizado com variáveis e tipos primitivos do Java. Os tipos vistos com mais detalhe foram int (inteiro) e double (decimal). Que usamos para fazer operações aritméticas e também concatenar com texto.

Durante o capítulo falamos sobre boas práticas na hora de nomear classes e também variáveis. Iniciamos as classes com letra maiúscula e as nossas funções e variáveis com letras minúsculas. Vamos falar mais sobre isto no futuro.

Foi possível entender um pouco de type casting e como podemos passar um valor de um tipo para uma variável de outro. Para alguns casos nós não precisamos fazer nada, pois o casting é implícito e em outros precisamos deixar claro para o compilador que sabemos o que estamos fazendo, mostrando entre parênteses o tipo que queremos que seja usado.

Com isso finalizamos esta aula. Próximo passo: caracteres! Espero vocês lá!

**********

Este capítulo apresentou:

O conceito e como declarar char e String
Como concatenar Strings
Atalho para criação da main
Variáveis guardam valores e não referências.

******
Nessa aula, aprendemos:

como usar o if
como usar as operações lógicas AND (&&) e OR (||)
trabalhar com o escopo de variáveis
Também já vimos alguns atalhos no Eclipse:

main + ctrl + espaço
para gerar o método main
ctrl + shift + f
para formatar o código fonte
sysout + ctrl + espaço
para gerar a instrução System.out.println()

**********

break irá interromper apenas o laço de repetição mais interno que o contém.

Neste capítulo aprendemos:

A sintaxe do while e for
O operador +=
O operador ++
Laços aninhados
A funcionalidade do break